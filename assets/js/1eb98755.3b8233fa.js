"use strict";(self.webpackChunkmidiremote_v_1_docs=self.webpackChunkmidiremote_v_1_docs||[]).push([[731],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),m=s(t),p=r,f=m["".concat(l,".").concat(p)]||m[p]||d[p]||i;return t?a.createElement(f,o(o({ref:n},c),{},{components:t})):a.createElement(f,o({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=p;var u={};for(var l in n)hasOwnProperty.call(n,l)&&(u[l]=n[l]);u.originalType=e,u[m]="string"==typeof e?e:r,o[1]=u;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8328:(e,n,t)=>{t.d(n,{b0:()=>u,jC:()=>i,kI:()=>o});var a=t(7294);const r=e=>n=>{let{children:t}=n,r=[];return a.Children.forEach(t,(e=>{const n=e.props?.children?a.Children.toArray(e.props?.children):[];0===n.length?r.push(e):n.forEach(((e,n)=>{r.push(e)}))})),a.createElement("div",{className:`admonition alert alert--${e}`},a.createElement("div",{className:"admonition-content"},r))},i=r("secondary"),o=r("info"),u=r("danger")},8854:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>u,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=t(7462),r=(t(7294),t(3905)),i=t(8328);const o={hide_table_of_contents:!0,slug:"/examples/realworlddevice",title:"Real World Device"},u=void 0,l={unversionedId:"Examples/realworlddevice",id:"Examples/realworlddevice",title:"Real World Device",description:"This example demonstrates a full stack MIDI Remote API Script.",source:"@site/docs/03-Examples/03-realworlddevice.md",sourceDirName:"03-Examples",slug:"/examples/realworlddevice",permalink:"/midiremote_api_doc/examples/realworlddevice",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{hide_table_of_contents:!0,slug:"/examples/realworlddevice",title:"Real World Device"},sidebar:"tutorialSidebar",previous:{title:"Next Device",permalink:"/midiremote_api_doc/examples/nextdevice"},next:{title:"API Versions + Compatibility",permalink:"/midiremote_api_doc/versions"}},s={},c=[],m={toc:c},d="wrapper";function p(e){let{components:n,...o}=e;return(0,r.kt)(d,(0,a.Z)({},m,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(i.kI,{mdxType:"Info"},(0,r.kt)("p",null,"This example demonstrates a full stack ",(0,r.kt)("strong",{parentName:"p"},"MIDI Remote API Script"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Surface:")),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(1056).Z,width:"2116",height:"852"})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"//-----------------------------------------------------------------------------\n// 0. INCLUDE common functions\n//-----------------------------------------------------------------------------\nvar helper = require('./helper')\n\n//-----------------------------------------------------------------------------\n// 1. DRIVER SETUP - create driver object, midi ports and detection information\n//-----------------------------------------------------------------------------\n\nvar midiremote_api = require('midiremote_api_v1')\n\nvar deviceDriver = midiremote_api.makeDeviceDriver('ExampleCompany', 'RealWorldDevice', 'Steinberg Media Technologies GmbH')\n\nvar midiInput = deviceDriver.mPorts.makeMidiInput()\nvar midiOutput = deviceDriver.mPorts.makeMidiOutput()\n\ndeviceDriver.makeDetectionUnit().detectPortPair(midiInput, midiOutput)\n    .expectInputNameEquals('RealWorld In')\n    .expectOutputNameEquals('RealWorld Out')\n\ndeviceDriver.makeDetectionUnit().detectPortPair(midiInput, midiOutput)\n    .expectInputNameEquals('MIDIIN (RealWorld)')\n    .expectOutputNameEquals('MIDIOUT (RealWorld)')\n\ndeviceDriver.makeDetectionUnit().detectPortPair(midiInput, midiOutput)\n    .expectInputNameEquals('MIDIIN (RealWorld) 2')\n    .expectOutputNameEquals('MIDIOUT (RealWorld) 2')\n\ndeviceDriver.makeDetectionUnit().detectPortPair(midiInput, midiOutput)\n    .expectInputNameEquals('MIDIIN (RealWorld) 3')\n    .expectOutputNameEquals('MIDIOUT (RealWorld) 3')\n\nvar surface = deviceDriver.mSurface\n\n//-----------------------------------------------------------------------------\n// 2. SURFACE LAYOUT - create control elements and midi bindings\n//-----------------------------------------------------------------------------\n\nfunction makeFaderStrip(channelIndex, x, y) {\n    var faderStrip = {}\n\n    faderStrip.btnMute = surface.makeButton(x + 2 * channelIndex, y, 2, 1)\n    faderStrip.btnSolo = surface.makeButton(x + 2 * channelIndex, y + 1, 2, 1)\n    faderStrip.fader = surface.makeFader(x + 2 * channelIndex, y + 3, 2, 6).setTypeVertical()\n\n    faderStrip.btnMute.mSurfaceValue.mMidiBinding.setInputPort(midiInput).bindToControlChange(15, 59 + channelIndex)\n    faderStrip.btnSolo.mSurfaceValue.mMidiBinding.setInputPort(midiInput).bindToControlChange(15, 67 + channelIndex)\n    faderStrip.fader.mSurfaceValue.mMidiBinding.setInputPort(midiInput).bindToControlChange(15, 41 + channelIndex)\n\n    faderStrip.fader.mSurfaceValue.mOnProcessValueChange = function (context, newValue, oldValue) {\n        midiOutput.sendMidi(context, helper.sysex.setDisplayValueOfColumn(channelIndex, 0, newValue * (127)))\n    }\n\n    faderStrip.fader.mSurfaceValue.mOnDisplayValueChange = function (context, value, units) {\n        midiOutput.sendMidi(context, helper.sysex.displaySetTextOfColumn(channelIndex, 2, value))\n    }\n\n    faderStrip.fader.mSurfaceValue.mOnTitleChange = function (context, objectTitle, valueTitle) {\n        midiOutput.sendMidi(context, helper.sysex.displaySetTextOfColumn(channelIndex, 0, objectTitle))\n        midiOutput.sendMidi(context, helper.sysex.displaySetTextOfColumn(channelIndex, 1, valueTitle))\n    }\n\n    faderStrip.fader.mSurfaceValue.mOnColorChange = function (context, r, g, b, a, isActive) {\n        function updateRow(rowIdx, r, g, b, a) {\n            midiOutput.sendMidi(context, helper.sysex.setDisplayColorOfColumn(channelIndex, rowIdx, r * 127 * a, g * 127 * a, b * 127 * a))\n        }\n\n        function updateAllRows(r, g, b, a) {\n            for(var rowIdx = 0; rowIdx < 4; ++rowIdx)\n                updateRow(rowIdx, r, g, b, a)\n        }\n\n        if(isActive)\n            updateAllRows(r, g, b, a)\n        else\n            updateAllRows(1, 1, 1, 1)\n    }\n\n    return faderStrip\n}\n\nfunction makeKnobStrip(knobIndex, x, y) {\n    var knobStrip = {}\n    \n    knobStrip.knob = surface.makeKnob(x + 2 * knobIndex, y, 2, 2)\n    knobStrip.knob.mSurfaceValue.mMidiBinding.setInputPort(midiInput).bindToControlChange(15, 21 + knobIndex).setTypeRelativeTwosComplement()\n\n    knobStrip.button = surface.makeButton(x + 2 * knobIndex, y + 4, 2, 1)\n    knobStrip.button.mSurfaceValue.mMidiBinding.setInputPort(midiInput).bindToControlChange(15, 51 + knobIndex)\n\n    knobStrip.pad1 = surface.makeTriggerPad(x + 2 * knobIndex, y + 5, 2, 2)\n    knobStrip.pad1.mSurfaceValue.mMidiBinding.setInputPort(midiInput).bindToNote(15, 96 + knobIndex)\n\n    knobStrip.pad2 = surface.makeTriggerPad(x + 2 * knobIndex, y + 7, 2, 2)\n    knobStrip.pad2.mSurfaceValue.mMidiBinding.setInputPort(midiInput).bindToNote(15, 112 + knobIndex)\n\n    return knobStrip\n}\n\nfunction makeTransport(x, y) {\n    var transport = {}\n\n    var w = 2\n    var h = 2\n\n    var currX = x\n\n    function bindMidiCC(button, chn, num) {\n        button.mSurfaceValue.mMidiBinding.setInputPort(midiInput).bindToControlChange(chn, num)\n    }\n    \n    transport.btnRewind = surface.makeButton(currX, y, w, h)\n    bindMidiCC(transport.btnRewind, 15, 112)\n    currX = currX + w\n\n    transport.btnForward = surface.makeButton(currX, y, w, h)\n    bindMidiCC(transport.btnForward, 15, 113)\n    currX = currX + w\n\n    transport.btnStop = surface.makeButton(currX, y, w, h)\n    bindMidiCC(transport.btnStop, 15, 114)\n    currX = currX + w\n\n    transport.btnStart = surface.makeButton(currX, y, w, h)\n    bindMidiCC(transport.btnStart, 15, 115)\n    currX = currX + w\n\n    transport.btnCycle = surface.makeButton(currX, y, w, h)\n    bindMidiCC(transport.btnCycle, 15, 116)\n    currX = currX + w\n\n    transport.btnRecord = surface.makeButton(currX, y, w, h)\n    bindMidiCC(transport.btnRecord, 15, 117)\n    currX = currX + w\n\n    return transport\n}\n\nfunction makeSurfaceElements() {\n    var surfaceElements = {}\n\n    surfaceElements.btn_prevTrack = surface.makeButton(0, 7, 2, 1)\n    surfaceElements.btn_prevTrack.mSurfaceValue.mMidiBinding.setInputPort(midiInput).bindToControlChange(15, 102)\n\n    surfaceElements.btn_nextTrack = surface.makeButton(2, 7, 2, 1)\n    surfaceElements.btn_nextTrack.mSurfaceValue.mMidiBinding.setInputPort(midiInput).bindToControlChange(15, 103)\n\n    surfaceElements.btn_prevBinding = surface.makeButton(0, 3, 2, 1)\n    surfaceElements.btn_prevBinding.mSurfaceValue.mMidiBinding.setInputPort(midiInput).bindToControlChange(15, 81)\n    \n    surfaceElements.btn_nextBinding = surface.makeButton(0, 4, 2, 1)\n    surfaceElements.btn_nextBinding.mSurfaceValue.mMidiBinding.setInputPort(midiInput).bindToControlChange(15, 82)\n    \n    surfaceElements.btn_prevChannelBank = surface.makeButton(2, 3, 2, 1)\n    surfaceElements.btn_prevChannelBank.mSurfaceValue.mMidiBinding.setInputPort(midiInput).bindToControlChange(15, 85)\n    \n    surfaceElements.btn_nextChannelBank = surface.makeButton(2, 4, 2, 1)\n    surfaceElements.btn_nextChannelBank.mSurfaceValue.mMidiBinding.setInputPort(midiInput).bindToControlChange(15, 86)\n\n    surfaceElements.numStrips = 8\n\n    surfaceElements.knobStrips = {}\n    surfaceElements.faderStrips = {}\n\n    var xKnobStrip = 5\n    var yKnobStrip = 0\n\n    surfaceElements.knobStripBlindPanel = surface.makeBlindPanel(xKnobStrip, yKnobStrip + 2, surfaceElements.numStrips * 2, 2)\n\n    for(var i = 0; i < surfaceElements.numStrips; ++i) {\n        surfaceElements.knobStrips[i] = makeKnobStrip(i, xKnobStrip, yKnobStrip)\n        surfaceElements.faderStrips[i] = makeFaderStrip(i, 24, 0)\n    }\n\n    surfaceElements.transport = makeTransport(41, 7)\n\n    surfaceElements.pianoKeys = surface.makePianoKeys(5, 10, 48, 7, 0, 48)\n\n    return surfaceElements\n}\n\nvar surfaceElements = makeSurfaceElements()\n\nfunction makeTransportDisplayFeedback(button, ledID, colorID) {\n    button.mSurfaceValue.mOnProcessValueChange = function (context, newValue) {\n        midiOutput.sendMidi(context, [ 0xbf, ledID, colorID * newValue ])\n    }\n}\n\nmakeTransportDisplayFeedback(surfaceElements.transport.btnRewind, 112, 3)\nmakeTransportDisplayFeedback(surfaceElements.transport.btnForward, 113, 3)\nmakeTransportDisplayFeedback(surfaceElements.transport.btnStop, 114, 3)\nmakeTransportDisplayFeedback(surfaceElements.transport.btnStart, 115, 21)\nmakeTransportDisplayFeedback(surfaceElements.transport.btnCycle, 116, 49)\nmakeTransportDisplayFeedback(surfaceElements.transport.btnRecord, 117, 5)\n\n//-----------------------------------------------------------------------------\n// 3. HOST MAPPING - create mapping pages and host bindings\n//-----------------------------------------------------------------------------\n\nfunction makePageWithDefaults(name) {\n    var page = deviceDriver.mMapping.makePage(name)\n\n    page.makeActionBinding(surfaceElements.btn_prevTrack.mSurfaceValue, page.mHostAccess.mTrackSelection.mAction.mPrevTrack)\n    page.makeActionBinding(surfaceElements.btn_nextTrack.mSurfaceValue, page.mHostAccess.mTrackSelection.mAction.mNextTrack)\n\n    page.makeValueBinding(surfaceElements.transport.btnRewind.mSurfaceValue, page.mHostAccess.mTransport.mValue.mRewind)\n    page.makeValueBinding(surfaceElements.transport.btnForward.mSurfaceValue, page.mHostAccess.mTransport.mValue.mForward)\n    page.makeValueBinding(surfaceElements.transport.btnStop.mSurfaceValue, page.mHostAccess.mTransport.mValue.mStop).setTypeToggle()\n    page.makeValueBinding(surfaceElements.transport.btnStart.mSurfaceValue, page.mHostAccess.mTransport.mValue.mStart).setTypeToggle()\n    page.makeValueBinding(surfaceElements.transport.btnCycle.mSurfaceValue, page.mHostAccess.mTransport.mValue.mCycleActive).setTypeToggle()\n    page.makeValueBinding(surfaceElements.transport.btnRecord.mSurfaceValue, page.mHostAccess.mTransport.mValue.mRecord).setTypeToggle()\n\n    return page\n}\n\nfunction makeSubPage(subPageArea, name) {\n    var subPage = subPageArea.makeSubPage(name)\n    var msgText = 'sub page ' + name + ' activated'\n    subPage.mOnActivate = function(activeDevice) {\n        console.log(msgText)\n    }\n    return subPage\n}\n\nfunction makePageMixer() {\n    var page = makePageWithDefaults('Mixer')\n\n    var knobSubPageArea = page.makeSubPageArea('Knobs')\n\n    var subPageVolume = makeSubPage(knobSubPageArea, 'Volume')\n    var subPagePan = makeSubPage(knobSubPageArea, 'Pan')\n\n    var subPageListSendLevel = []\n\n    var numSendLevelSubPages = midiremote_api.mDefaults.getNumberOfSendSlots ()\n    for(var subPageIdx = 0; subPageIdx < numSendLevelSubPages; ++subPageIdx) {\n        var nameSubPage = 'Send Level ' + (subPageIdx + 1).toString()\n        var subPageSendLevel = makeSubPage(knobSubPageArea, nameSubPage)\n        subPageListSendLevel.push(subPageSendLevel)\n    }\n\n    var hostMixerBankZone = page.mHostAccess.mMixConsole.makeMixerBankZone()\n        .excludeInputChannels()\n        .excludeOutputChannels()\n\n    page.makeActionBinding(surfaceElements.btn_prevChannelBank.mSurfaceValue, hostMixerBankZone.mAction.mPrevBank)\n    page.makeActionBinding(surfaceElements.btn_nextChannelBank.mSurfaceValue, hostMixerBankZone.mAction.mNextBank)\n\n    page.makeActionBinding(surfaceElements.btn_prevBinding.mSurfaceValue, knobSubPageArea.mAction.mPrev)\n    page.makeActionBinding(surfaceElements.btn_nextBinding.mSurfaceValue, knobSubPageArea.mAction.mNext)\n\n    function bindChannelBankItem(index) {\n        var channelBankItem = hostMixerBankZone.makeMixerBankChannel()\n\n        var knobValue = surfaceElements.knobStrips[index].knob.mSurfaceValue\n        var selectedButtonValue = surfaceElements.knobStrips[index].button.mSurfaceValue\n\n        var muteValue = surfaceElements.faderStrips[index].btnMute.mSurfaceValue\n        var soloValue = surfaceElements.faderStrips[index].btnSolo.mSurfaceValue\n        var faderValue = surfaceElements.faderStrips[index].fader.mSurfaceValue\n\n        page.makeValueBinding (knobValue, channelBankItem.mValue.mVolume).setSubPage(subPageVolume)\n        page.makeValueBinding (knobValue, channelBankItem.mValue.mPan).setSubPage(subPagePan)\n\n        for(var subPageIdx = 0; subPageIdx < numSendLevelSubPages; ++subPageIdx) {\n            var sendLevel = channelBankItem.mSends.getByIndex(subPageIdx).mLevel\n            var subPage = subPageListSendLevel[subPageIdx]\n            page.makeValueBinding (knobValue, sendLevel).setSubPage(subPage)\n        }\n\n        page.makeValueBinding (selectedButtonValue, channelBankItem.mValue.mSelected)\n\n        page.makeValueBinding (muteValue, channelBankItem.mValue.mMute).setTypeToggle()\n        page.makeValueBinding (soloValue, channelBankItem.mValue.mSolo).setTypeToggle()\n        page.makeValueBinding (faderValue, channelBankItem.mValue.mVolume)\n    }\n\n    for(var i = 0; i < 8; ++i)\n        bindChannelBankItem(i)\n\n    return page\n}\n\nfunction makePageSelectedTrack() {\n    var page = makePageWithDefaults('Selected Track')\n\n    var selectedTrackChannel = page.mHostAccess.mTrackSelection.mMixerChannel\n\n    for(var idx = 0; idx < surfaceElements.knobStrips.length; ++idx)\n        page.makeValueBinding (surfaceElements.knobStrips[idx].knob.mSurfaceValue, selectedTrackChannel.mQuickControls.getByIndex(idx))\n    \n    return page\n}\n\nvar pageMixer = makePageMixer()\nvar pageSelectedTrack = makePageSelectedTrack()\n\npageMixer.mOnActivate = function (context) {\n    helper.display.reset(context, midiOutput)\n    console.log('from script: RealWorldDevice page \"Mixer\" activated')\n}\n\npageSelectedTrack.mOnActivate = function (context) {\n    helper.display.reset(context, midiOutput)\n    console.log('from script: RealWorldDevice page \"Selected Track\" activated')\n}\n")))}p.isMDXComponent=!0},1056:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/remote_window_real_world_device-6a3d665df17173f9cb5017cfcecfdc62.png"}}]);