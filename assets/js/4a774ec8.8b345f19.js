"use strict";(self.webpackChunkmidiremote_v_1_docs=self.webpackChunkmidiremote_v_1_docs||[]).push([[277],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>v});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=i,v=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(v,o(o({ref:t},u),{},{components:n})):r.createElement(v,o({ref:t},u))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8328:(e,t,n)=>{n.d(t,{b0:()=>l,jC:()=>a,kI:()=>o});var r=n(7294);const i=e=>t=>{let{children:n}=t,i=[];return r.Children.forEach(n,(e=>{const t=e.props?.children?r.Children.toArray(e.props?.children):[];0===t.length?i.push(e):t.forEach(((e,t)=>{i.push(e)}))})),r.createElement("div",{className:`admonition alert alert--${e}`},r.createElement("div",{className:"admonition-content"},i))},a=i("secondary"),o=i("info"),l=i("danger")},6220:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var r=n(7462),i=(n(7294),n(3905)),a=n(8328);const o={slug:"/new_in_v1.1",title:"New in v1.1",hide_table_of_contents:!1},l="New in MIDI Remote v1.1",c={unversionedId:"v1_1",id:"v1_1",title:"New in v1.1",description:"Version 1.1 of the MIDI Remote API introduces two new features.",source:"@site/docs/05-v1_1.md",sourceDirName:".",slug:"/new_in_v1.1",permalink:"/new_in_v1.1",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{slug:"/new_in_v1.1",title:"New in v1.1",hide_table_of_contents:!1},sidebar:"tutorialSidebar",previous:{title:"API Versions + Compatibility",permalink:"/versions"},next:{title:"Advanced Topics",permalink:"/advanced-topics"}},s={},u=[{value:"1. Support for Touch Sensitive Controls",id:"1-support-for-touch-sensitive-controls",level:2},{value:"2. Options to register Idle Callbacks",id:"2-options-to-register-idle-callbacks",level:2},{value:"Idle Callback on active mapping page",id:"idle-callback-on-active-mapping-page",level:4},{value:"Idle Callback on activated device driver",id:"idle-callback-on-activated-device-driver",level:4}],d={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"new-in-midi-remote-v11"},"New in MIDI Remote v1.1"),(0,i.kt)("p",null,"Version 1.1 of the ",(0,i.kt)("strong",{parentName:"p"},"MIDI Remote API")," introduces two new features."),(0,i.kt)("h2",{id:"1-support-for-touch-sensitive-controls"},"1. Support for Touch Sensitive Controls"),(0,i.kt)(a.b0,{mdxType:"Danger"},(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Compatibility note")),(0,i.kt)("br",null),"For your script to remain compatible with Cubase 12 (MIDI Remote API 1.0), the touch state feature has to be tested for existence (wrapped inside an if-statement) before being used."),(0,i.kt)("p",null,"A touch sensitive fader can be implemented like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"...\n\nvar fader = driver.mSurface.makeFader(0, 0, 1, 6)\nfader.mSurfaceValue.mMidiBinding.setInputPort(midiInput).setOutputPort(midiOutput).bindToPitchBend(0)\n \n// !!! Important !!!\n// Test for the existing TouchState feature\n// to make the script compatible with Cubase 12 as well\n// highlight-start\nif(fader.mSurfaceValue.mTouchState) {\n    // create a custom value variable to bind agains the touch state midi message\n    var faderTouchValue = driver.mSurface.makeCustomValueVariable('faderTouch1')\n    faderTouchValue.mMidiBinding.setInputPort(midiIn).bindToNote(0, 104)\n   \n    // bind the custom value variable to the TouchState member. (new in API 1.1)\n    fader.mSurfaceValue.mTouchState.bindTo(faderTouchValue)\n}\n// highlight-end\n\n...\n")),(0,i.kt)("h2",{id:"2-options-to-register-idle-callbacks"},"2. Options to register Idle Callbacks"),(0,i.kt)(a.kI,{mdxType:"Info"},(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Compatibility note")),(0,i.kt)("br",null),"As the Idle Callback feature is only a member value that can be assigned a function, no further compatibility coding is necessary. Just be aware that in Cubase 12, those callbacks do not work. So it is up to you to use them in a way that the script is still useful in Cubase 12 without those callbacks being called."),(0,i.kt)("h4",{id:"idle-callback-on-active-mapping-page"},"Idle Callback on active mapping page"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var driver = midiremote_api.makeDeviceDriver(\"Test\", \"Test\", \"Test\")\nvar midiInput = driver.mPorts.makeMidiInput('midiInput')\nvar midiOutput = driver.mPorts.makeMidiOutput('midiOutput')\n\nvar page = driver.mMapping.makePage('Default')\n\n// highlight-start\npage.mOnIdle = function(activeDevice, activeMapping) {\n   console.log('Default PAGE ON IDLE')\n}\n// highlight-end\n")),(0,i.kt)("h4",{id:"idle-callback-on-activated-device-driver"},"Idle Callback on activated device driver"),(0,i.kt)(a.b0,{mdxType:"Danger"},(0,i.kt)("p",null,"This callback cannot access functions related to the current mapping page. In most cases you will want to use the Idle Callback on a mapping page instead.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var driver = midiremote_api.makeDeviceDriver(\"Test\", \"Test\", \"Test\")\nvar midiInput = driver.mPorts.makeMidiInput('midiInput')\nvar midiOutput = driver.mPorts.makeMidiOutput('midiOutput')\n\n// highlight-start\ndriver.mOnIdle = function(activeDevice) {\n    console.log('DRIVER ON IDLE')\n}\n// highlight-end\n")))}m.isMDXComponent=!0}}]);