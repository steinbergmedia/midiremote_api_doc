"use strict";(self.webpackChunkmidiremote_v_1_docs=self.webpackChunkmidiremote_v_1_docs||[]).push([[71],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>v});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),l=s(n),m=r,v=l["".concat(p,".").concat(m)]||l[m]||u[m]||o;return n?i.createElement(v,a(a({ref:t},d),{},{components:n})):i.createElement(v,a({ref:t},d))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=m;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[l]="string"==typeof e?e:r,a[1]=c;for(var s=2;s<o;s++)a[s]=n[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},842:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var i=n(7462),r=(n(7294),n(3905));const o={slug:"/api-details/detection-unit",title:"Device Detection",hide_table_of_contents:!1},a=void 0,c={unversionedId:"Advanced-Topics/device-detection",id:"Advanced-Topics/device-detection",title:"Device Detection",description:"Automatic device detection plays an important role in the MIDI Remote API, significantly improving user experience. By identifying and configuring MIDI controllers automatically, manual setup by the user becomes obsolete. This simplifies the connection process, allowing users to focus on their creative work without being hindered by technical tasks.",source:"@site/docs/06-Advanced-Topics/01-device-detection.md",sourceDirName:"06-Advanced-Topics",slug:"/api-details/detection-unit",permalink:"/midiremote_api_doc/api-details/detection-unit",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/api-details/detection-unit",title:"Device Detection",hide_table_of_contents:!1},sidebar:"tutorialSidebar",previous:{title:"Advanced Topics",permalink:"/midiremote_api_doc/advanced-topics"},next:{title:"Command Bindings",permalink:"/midiremote_api_doc/examples/commandbindings"}},p={},s=[{value:"Detection Unit",id:"detection-unit",level:2},{value:"Detecting a Port Pair",id:"detecting-a-port-pair",level:2},{value:"By Port Name",id:"by-port-name",level:3},{value:"By Sysex Identity Response",id:"by-sysex-identity-response",level:3}],d={toc:s},l="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(l,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Automatic device detection plays an important role in the ",(0,r.kt)("strong",{parentName:"p"},"MIDI Remote API"),", significantly improving user experience. By identifying and configuring MIDI controllers automatically, manual setup by the user becomes obsolete. This simplifies the connection process, allowing users to focus on their creative work without being hindered by technical tasks."),(0,r.kt)("h2",{id:"detection-unit"},"Detection Unit"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Detection Units")," enable automatic detection and identification of MIDI devices, specifically MIDI input and output ports. They provide a structured way to define and execute the process of detecting these devices based on various criteria, such as port names and/or sysex identity responses. The goal is to simplify the configuration and setup process for MIDI devices by automating the detection process."),(0,r.kt)("p",null,"You can create a detection unit object using the previously created device driver object. This detection unit object serves as the starting point for defining the detection process."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"var midiremote_api = require('midiremote_api_v1')\n\n// create the device driver main object\nvar deviceDriver = midiremote_api.makeDeviceDriver('ExampleCompany', 'SimpleDevice', 'Steinberg Media Technologies GmbH')\n\nconst detectionUnit = deviceDriver.makeDetectionUnit()\n")),(0,r.kt)("h2",{id:"detecting-a-port-pair"},"Detecting a Port Pair"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"detectPortPair")," method of the Detection Unit creates a link between a MIDI input and output port for bidirectional communication."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"var midiInput = deviceDriver.mPorts.makeMidiInput()\nvar midiOutput = deviceDriver.mPorts.makeMidiOutput()\n\nconst portPair = detectionUnit.detectPortPair(inputPort, outputPort);\n")),(0,r.kt)("h3",{id:"by-port-name"},"By Port Name"),(0,r.kt)("p",null,"You can use various methods on a ",(0,r.kt)("inlineCode",{parentName:"p"},"DetectionPortPair")," instance to specify expectations about the names of the input and output ports."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"portPair.expectInputNameEquals('SimpleDevice IN');\nportPair.expectOutputNameEquals('SimpleDevice OUT');\n")),(0,r.kt)("p",null,"Other available methods include ",(0,r.kt)("inlineCode",{parentName:"p"},"expectInputNameContains"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"expectInputNameStartsWith"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"expectInputNameEndsWith"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"expectOutputNameContains"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"expectOutputNameStartsWith"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"expectOutputNameEndsWith"),"."),(0,r.kt)("h3",{id:"by-sysex-identity-response"},"By Sysex Identity Response"),(0,r.kt)("p",null,"The expectSysexIdentityResponse method of DetectionPortPair allows you to expect a specific sysex identity response from the connected device. This can help in identifying devices that respond with specific manufacturer IDs, device families, and model numbers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"deviceDriver.makeDetectionUnit().detectPortPair(midiInput, midiOutput)\n    .expectSysexIdentityResponse('00206B', '0200', '0402')\n")),(0,r.kt)("p",null,"Here the ",(0,r.kt)("strong",{parentName:"p"},"Arturia MiniLab mkII")," has been defined for detection."))}u.isMDXComponent=!0}}]);